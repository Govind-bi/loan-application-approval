import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
import joblib

train_df = pd.read_csv("train.csv") 
print("Training Data Shape:", train_df.shape)

train_df.fillna(train_df.mode().iloc[0], inplace=True)

label_enc = LabelEncoder()
for col in train_df.select_dtypes(include=['object']).columns:
    train_df[col] = label_enc.fit_transform(train_df[col])

train_df = train_df.drop("Loan_ID", axis=1)

X = train_df.drop("Loan_Status", axis=1)
y = train_df["Loan_Status"]


X_train, X_val, y_train, y_val = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_val = scaler.transform(X_val)

models = {
    "Logistic Regression": LogisticRegression(max_iter=1000),
    "Decision Tree": DecisionTreeClassifier(),
    "Random Forest": RandomForestClassifier(),
    "SVM": SVC(),
    "KNN": KNeighborsClassifier()
}

results = {}
for name, model in models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_val)
    acc = accuracy_score(y_val, y_pred)
    results[name] = acc
    print(f"\n{name} Results:")
    print("Accuracy:", round(acc, 4))
    print("Classification Report:\n", classification_report(y_val, y_pred))
    print("Confusion Matrix:\n", confusion_matrix(y_val, y_pred))

best_model_name = max(results, key=results.get)
best_model = models[best_model_name]
print(f"\nBest Model: {best_model_name} with Accuracy {results[best_model_name]:.4f}")

joblib.dump(best_model, "best_loan_approval_model.pkl")
print("Best model saved as 'best_loan_approval_model.pkl'")

test_df = pd.read_csv("test_Y3wMUE5_7gLdaTN.csv")  
loan_ids = test_df["Loan_ID"]

test_df.fillna(test_df.mode().iloc[0], inplace=True)

for col in test_df.select_dtypes(include=['object']).columns:
    test_df[col] = label_enc.fit_transform(test_df[col])

X_test_final = test_df.drop("Loan_ID", axis=1)

X_test_final = scaler.transform(X_test_final)

predictions = best_model.predict(X_test_final)

mapping = {1: "Approved", 0: "Rejected"}
predictions_mapped = pd.Series(predictions).map(mapping)

submission = pd.DataFrame({
    "Loan_ID": loan_ids,
    "Loan_Status": predictions_mapped
})
submission.to_csv("submission.csv", index=False)
print("Submission file 'submission.csv' created successfully.")
print(submission.head())
